::call-hook
// :jumpback, CallType, gas, address, value, argOffset, argSize, retOffset, retSize
JUMPDEST
// Encode a delegatecall to handleSpyCall(CallType,gas, address, value, data)

// Encode selector
// selector(4), :jumpback, CallType, gas, address, value, argOffset, argSize, retOffset, retSize
PUSH4 $HANDLE_SPY_CALL_SELECTOR
// 224, selector(4), :jumpback, CallType, gas, address, value, argOffset, argSize, retOffset, retSize
PUSH1 224
// selector(4) << 224, :jumpback, CallType, gas, address, value, argOffset, argSize, retOffset, retSize
SHL
// scratch, selector(4) << 224, :jumpback, CallType, gas, address, value, argOffset, argSize, retOffset, retSize
PUSH2 $SCRATCH_MEM_LOC
// CallType, gas, address, value, argOffset, argSize, retOffset, retSize
MSTORE

// Encode CallType
// CallType, :jumpback, gas, address, value, argOffset, argSize, retOffset, retSize
SWAP1
// scratch, CallType, :jumpback, gas, address, value, argOffset, argSize, retOffset, retSize
PUSH2 $SCRATCH_MEM_LOC
// 4, scratch, CallType, :jumpback, gas, address, value, argOffset, argSize, retOffset, retSize
PUSH1 0x04
// scratch+4, CallType, :jumpback, gas, address, value, argOffset, argSize, retOffset, retSize
ADD
// :jumpback, gas, address, value, argOffset, argSize, retOffset, retSize
MSTORE

// Encode gas
// gas, :jumpback, address, value, argOffset, argSize, retOffset, retSize
SWAP1
// scratch, gas, :jumpback, address, value, argOffset, argSize, retOffset, retSize
PUSH2 $SCRATCH_MEM_LOC
// 0x24, scratch, gas, :jumpback, address, value, argOffset, argSize, retOffset, retSize
PUSH1 0x24
// scratch+0x24, gas, :jumpback, address, value, argOffset, argSize, retOffset, retSize
ADD
// :jumpback, address, value, argOffset, argSize, retOffset, retSize
MSTORE

// Encode address
// address, :jumpback, value, argOffset, argSize, retOffset, retSize
SWAP1
// scratch, address, :jumpback, value, argOffset, argSize, retOffset, retSize
PUSH2 $SCRATCH_MEM_LOC
// 0x44, scratch, address, :jumpback, value, argOffset, argSize, retOffset, retSize
PUSH1 0x44
// scratch+0x44, address, :jumpback, value, argOffset, argSize, retOffset, retSize
ADD
// :jumpback, value, argOffset, argSize, retOffset, retSize
MSTORE

// Encode value
// value, :jumpback argOffset, argSize, retOffset, retSize
SWAP1
// scratch, value, :jumpback, argOffset, argSize, retOffset, retSize
PUSH2 $SCRATCH_MEM_LOC
// 0x64, scratch, value, :jumpback, argOffset, argSize, retOffset, retSize
PUSH1 0x64
// scratch+0x64, value, :jumpback, argOffset, argSize, retOffset, retSize
ADD
// :jumpback, argOffset, argSize, retOffset, retSize
MSTORE

// Encode data offset
// 0xA0, :jumpback, argOffset, argSize, retOffset, retSize
PUSH1 0xA0
// 0x84, 0xA0, :jumpback, argOffset, argSize, retOffset, retSize
PUSH1 0x84
// scratch, 0x84, 0xA0, :jumpback, argOffset, argSize, retOffset, retSize
PUSH2 $SCRATCH_MEM_LOC
// scratch+0x84, 0xA0, :jumpback, argOffset, argSize, retOffset, retSize
ADD
// :jumpback, argOffset, argSize, retOffset, retSize
MSTORE

// Encode data size
// argSize, :jumpback, argOffset, argSize, retOffset, retSize
DUP3
// 0xA4, argSize, :jumpback, argOffset, argSize, retOffset, retSize
PUSH1 0xA4
// scratch, 0xA4, argSize, :jumpback, argOffset, argSize, retOffset, retSize
PUSH2 $SCRATCH_MEM_LOC
// scratch+0xA4, argSize, :jumpback, argOffset, argSize, retOffset, retSize
ADD
// :jumpback, argOffset, argSize, retOffset, retSize
MSTORE

// Encode data
// argSize, argOffset, :jumpback, retOffset, retSize
SWAP2
// i=0, argSize, argOffset, :jumpback, retOffset, retSize
PUSH1 0
:data-loop
JUMPDEST
    // escape
    // argSize, i, argSize, argOffset, :jumpback, retOffset, retSize
    DUP2
    // i, argSize, i, argSize, argOffset, :jumpback, retOffset, retSize
    DUP2
    // i < argSize, i, argSize, argOffset, :jumpback, retOffset, retSize
    LT
    // i >= argSize, i, argSize, argOffset, :jumpback, retOffset, retSize
    ISZERO
    // :data-loop-out, i >= argSize, i, argSize, argOffset, :jumpback, retOffset, retSize
    PUSH3 :data-loop-out
    // i, argSize, argOffset, :jumpback, retOffset, retSize
    JUMPI

    // copy word of data
    // i, i, argSize, argOffset, :jumpback, retOffset, retSize
    DUP1
    // argOffset, i, i, argSize, argOffset, :jumpback, retOffset, retSize
    DUP4
    // argOffset+i, i, argSize, argOffset, :jumpback, retOffset, retSize
    ADD
    // dataWord, i, argSize, argOffset, :jumpback, retOffset, retSize
    MLOAD
    // scratch, dataWord, i, argSize, argOffset, :jumpback, retOffset, retSize
    PUSH2 $SCRATCH_MEM_LOC
    // 0xC4, scratch, dataWord, i, argSize, argOffset, :jumpback, retOffset, retSize
    PUSH1 0xC4
    // scratch+0xC4, dataWord, i, argSize, argOffset, :jumpback, retOffset, retSize
    ADD
    // i, scratch+0xC4, dataWord, i, argSize, argOffset, :jumpback, retOffset, retSize
    DUP3
    // scratch+0xC4+i, dataWord, i, argSize, argOffset, :jumpback, retOffset, retSize
    ADD
    // i, argSize, argOffset, :jumpback, retOffset, retSize
    MSTORE

    // i += 32
    // 0x20, i, argSize, argOffset, :jumpback, retOffset, retSize
    PUSH1 0x20
    // i+0x20, argSize, argOffset, :jumpback, retOffset, retSize
    ADD

    // re-loop
    // :data-loop, i, argSize, argOffset, :jumpback, retOffset, retSize
    PUSH3 :data-loop
    // i, argSize, argOffset, :jumpback, retOffset, retSize
    JUMP
:data-loop-out
// i, argSize, argOffset, :jumpback, retOffset, retSize
JUMPDEST
// argSize, argOffset, :jumpback, retOffset, retSize
POP
// argOffset, argSize, :jumpback, retOffset, retSize
SWAP1
// argSize, :jumpback, retOffset, retSize
POP

// Compute call data size
// 0xC4, argSize, :jumpback, retOffset, retSize
PUSH1 0xC4
// callDataSize=argSize+0xC4, :jumpback, retOffset, retSize
ADD

// perform checked delegatecall
// :after-call, callDataSize, :jumpback, retOffset, retSize
PUSH3 :after-call
// callDataSize, :after-call, :jumpback, retOffset, retSize
SWAP1
// ::checked-delegatecall, callDataSize, :after-call, :jumpback, retOffset, retSize
PUSH3 ::checked-delegatecall
// callDataSize, :after-call, :jumpback, retOffset, retSize
JUMP
:after-call
// :jumpback, retOffset, retSize
JUMPDEST

// Return data will be encoded as:
// | 0x00 - 0x20          | `bool success`              |
// | 0x20 - 0x40          | `bytes resultData` (offset) |
// | 0x40 - 0x60          | `uint256 gasUsed`           |
// | offset - offset+0x20 | `resultData` length         |
// | offset+0x20 - offset+0x20+resultData.length | `resultData` data |

// decode success return value
// 0x20, :jumpback, retOffset, retSize
PUSH1 0x20
// 0x00, 0x20, :jumpback, retOffset, retSize
PUSH1 0x00
// scratch, 0x00, 0x20, :jumpback, retOffset, retSize
PUSH2 $SCRATCH_MEM_LOC
// :jumpback, retOffset, retSize
RETURNDATACOPY
// scratch, :jumpback, retOffset, retSize
PUSH2 $SCRATCH_MEM_LOC
// success, :jumpback, retOffset, retSize
MLOAD
// retSize, :jumpback, retOffset, success
SWAP3
// retOffset, :jumpback, retSize, success
SWAP2
// :jumpback, retOffset, retSize, success
SWAP1

// decode call result offset
// 0x20, :jumpback, retOffset, retSize, success
PUSH1 0x20
// 0x20, 0x20, :jumpback, retOffset, retSize, success
DUP1
// scratch, 0x20, 0x20, :jumpback, retOffset, retSize, success
PUSH2 $SCRATCH_MEM_LOC
// :jumpback, retOffset, retSize, success
RETURNDATACOPY
// scratch, :jumpback, retOffset, retSize, success
PUSH2 $SCRATCH_MEM_LOC
// resultDataOffset, :jumpback, retOffset, retSize, success
MLOAD

// decode call result length 
// 0x20, resultDataOffset, :jumpback, retOffset, retSize, success
PUSH1 0x20
// resultDataOffset, 0x20, resultDataOffset, :jumpback, retOffset, retSize, success
DUP2
// scratch, resultDataOffset, 0x20, resultDataOffset, :jumpback, retOffset, retSize, success
PUSH2 $SCRATCH_MEM_LOC
// resultDataOffset, :jumpback, retOffset, retSize, success
RETURNDATACOPY
// scratch, resultDataOffset, :jumpback, retOffset, retSize, success
PUSH2 $SCRATCH_MEM_LOC
// resultDataLength, resultDataOffset, :jumpback, retOffset, retSize, success
MLOAD

// copy call result data to scratch
// resultDataLength, resultDataLength, resultDataOffset, :jumpback, retOffset, retSize, success
DUP1
// resultDataOffset, resultDataLength, resultDataLength, :jumpback, retOffset, retSize, success
SWAP2
// 0x20, resultDataOffset, resultDataLength, resultDataLength, :jumpback, retOffset, retSize, success
PUSH1 0x20
// resultDataOffset+0x20, resultDataLength, resultDataLength, :jumpback, retOffset, retSize, success
ADD
// scratch, resultDataOffset+0x20, resultDataLength, resultDataLength, :jumpback, retOffset, retSize, success
PUSH2 $SCRATCH_MEM_LOC
// resultDataLength, :jumpback, retOffset, retSize, success
RETURNDATACOPY

// staticcall the identity precompile (0x04) to fill EVM RETURNDATA with call result
// identityRetSize=0, resultDataLength, :jumpback, retOffset, retSize, success
PUSH1 0x00
// resultDataLength, identityRetSize, :jumpback, retOffset, retSize, success
SWAP1
// identityRetOffset=0, resultDataLength, identityRetSize, :jumpback, retOffset, retSize, success
PUSH1 0x00
// identityArgSize=resultDataLength, identityRetOffset, identityRetSize, :jumpback, retOffset, retSize, success
SWAP1
// identityArgOffset=scratch, identityArgSize, identityRetOffset, identityRetSize, :jumpback, retOffset, retSize, success
PUSH2 $SCRATCH_MEM_LOC
// address=0x04, identityArgOffset, identityArgSize, identityRetOffset, identityRetSize, :jumpback, retOffset, retSize, success
PUSH1 0x04
// gas, address, identityArgOffset, identityArgSize, identityRetOffset, identityRetSize, :jumpback, retOffset, retSize, success
GAS
// identitySuccess=true, :jumpback, retOffset, retSize, success
STATICCALL
// :jumpback, retOffset, retSize, success
POP

// Copy (up to) retSize bytes to to retOffset
// retSize, retOffset, :jumpback, success
SWAP2
// maxRetSize, retSize, retOffset, :jumpback, success
RETURNDATASIZE
// maxRetSize, maxRetSize, retSize, retOffset, :jumpback, success
DUP1
// retSize, maxRetSize, maxRetSize, retSize, retOffset, :jumpback, success
DUP3
// retSize > maxRetSize, maxRetSize, retSize, retOffset, :jumpback, success
GT
// retSize <= maxRetSize, maxRetSize, retSize, retOffset, :jumpback, success
ISZERO
// clamped, retSize <= maxRetSize, maxRetSize, retSize, retOffset, :jumpback, success
PUSH3 :clamped
// maxRetSize, retSize, retOffset, :jumpback, success
JUMPI
    // retSize, maxRetSize, retOffset, :jumpback, success
    SWAP1
:clamped
JUMPDEST
// retSize, retOffset, :jumpback, success
POP
// retCopyStart=0x00, retSize, retOffset, :jumpback, success
PUSH1 0x00
// retSize, retCopyStart, retOffset, :jumpback, success
SWAP1
// retOffset, retCopyStart, retSize, :jumpback, success
SWAP2
// :jumpback, success
RETURNDATACOPY
// success
JUMP
